<<<<<<< HEAD
const deployLambda = require('../aws/deployLambda.js');
const { writeLambda } = require('../util/writeToLib.js');
const getUserInput = require('../util/getUserInput.js');
const deployApi = require('../aws/deployApi.js');
const { bamWarn } = require('../util/fancyText.js');
=======
const deployLambda = require('../aws/deployLambda');
const deployApi = require('../aws/deployApi');
const getUserInput = require('../util/getUserInput');
const { bamWarn } = require('../util/logger');
const { validateLambdaDeployment } = require('../util/validateLambda');
>>>>>>> 8b12b3e687bb90a2069e9237683c06ec98b930d3

module.exports = async function deploy(lambdaName, path) {
  const invalidLambdaMsg = await validateLambdaDeployment(lambdaName);

  if (invalidLambdaMsg) {
    bamWarn(invalidLambdaMsg);
    return;
  }

  const question = {
    question: 'Please give a brief description of your lambda: ',
    validator: () => (true),
    feedback: 'invalid description',
    defaultAnswer: '',
  };
<<<<<<< HEAD
  try {
    const input = await getUserInput([question]);
    if (input === undefined) return;
    const [description] = input;
    const lambdaData = await deployLambda(lambdaName, description, path);
    await writeLambda(lambdaData, path, description);
    await deployApi(lambdaName, path);
  } catch (err) {
    bamWarn(err);
=======

  const input = await getUserInput([question]);
  if (input === undefined) {
    bamWarn('Lambda deployment aborted');
    return;
  } else {
    const [description] = input;
    await deployLambda(lambdaName, description, path);
    await deployApi(lambdaName, path);
>>>>>>> 8b12b3e687bb90a2069e9237683c06ec98b930d3
  }
};
