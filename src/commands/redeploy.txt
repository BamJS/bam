 lambda | AWS api |  local api  |            |  add/remove methods |
--------+-------------+------------+---------------------+
        |   true  |    true     |            |      true           |  normal
        |   true  |    true     |            |                     |  normal
        |   true  |             |            |      true           |  warn user --> no api
        |   true  |             |            |                     |  normal
        |         |    true     |            |      true           |  create api, use methods supplied
        |         |    true     |            |                     |  create api, use GET
        |         |             |            |      true           |  warn user --> no api
        |         |             |            |                     |  normal


--addApi || local api => create api if it doesn't already exist
no --addApi && no local api && methods => warn user and immediately quit

Redeploy Sequence:

In order to return early, all validations should be run at the command level

(lambda, addMethods, removeMethods, addApi?)

validateLambdaReDeployment  --> if bad quit early

let restApiId = getRestApiId()
resources = getApiResources(restApiId);
{ resources, addMethods, rmMethods } = getHttpMethods(resouces, addMethods, rmMethods);

validateApiMethods --> if bad quit early

if (!localLambda) {
  getLambdaDataFromAws();
  writeLambda();
}

updateLambda(updates both code and role)

if ((local api || methods ) && !aws api) {
  restApiId = create api on AWS
}

if (restApiId) {
  updateHttpMethods()
  writeApi()
}
________________________________________

getApiResources() {
  let resources = [];
  if (restApiId) {
    resource = getResources()
  }
  return resources
}

resolveHttpMethodsFromOptions(options, restApiId, path) {
  let addMethods = options.methods || options.method;
  let removeMethods = options.rmMethods || options.rmMethod;
  let existingMethods = [];

  addMethods = addMethods
    ? distinctElements(addMethods.map(m => m.toUpperCase())) : [];

  removeMethods = removeMethods
    ? distinctElements(removeMethods.map(m => m.toUpperCase())) : [];

  const data = await asyncGetResources({ restApiId });
  if (data) {
    const resources = data.items
    const resource = resources.find(res => res.path === '/');
    existingMethods = Object.keys(resource.resourceMethods || {});
  }

  return { existingMethods, addMethods, removeMethods };
};
